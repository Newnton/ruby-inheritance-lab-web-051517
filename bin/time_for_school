#!/usr/bin/env ruby

require_relative "../lib/user.rb"
require_relative "../lib/teacher.rb"
require_relative "../lib/student.rb"

steve = Student.new
steve.first_name = "Steve"
steve.last_name = "Jobs"

avi = Teacher.new
avi.first_name = "Avi"
avi.last_name = "Flombaum"


some_knowledge = avi.teach

steve.learn(some_knowledge)

puts "Steve just learned this important knowledge: '#{steve.knowledge.first}' from Avi"


# Define the User class such that a user can have a first and last name. You'll need both a setter and
# a getter for first and last name.
# We've given you a barebones Teacher class in lib/teacher.rb.
# Change the class definition so that the Teacher class inherits from the User class.
# Run the test suite and notice that you are passing some tests for the Teacher class,
# even without writing any code inside that class. That is because it will inherit the #first_name and
# #last_name methods from the User class you told it to inherit from.
# We've given you a class constant KNOWLEDGE, that points to an array of knowledge strings.
# Write a method, #teach that returns a random element from that array. You might want to look up the
# Array#sample method.
# We've given you a barebones Student class. Change the class definition so that it inherits from the
# User class. Run the test suite and notice that you are passing some tests for the Student class,
# even without writing any code inside that class. That is because it will inherit
# the #first_name and #last_name methods from the User class you told it to inherit from.
# Individual students should initialize with an instance variable, @knowledge, that points to an empty array.
# Define a method, #learn, that takes in a string and adds that string to the student's @knowledge array.
# Define a method, #knowledge, that returns that students knowledge array.
